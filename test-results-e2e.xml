<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="6" skipped="0" tests="10" time="2.440" timestamp="2025-10-10T16:23:45.607756" hostname="DESKTOP-HJG447E"><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_complete_markdown_to_kindle_workflow" time="0.090"><failure message="AssertionError: Expected '_send_email' to have been called once. Called 0 times.">self = &lt;MagicMock name='_send_email' id='129911494147632'&gt;

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected '_send_email' to have been called once. Called 0 times.

/usr/lib/python3.12/unittest/mock.py:923: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.e2e.test_complete_workflow.TestCompleteWorkflow object at 0x7627608ad4c0&gt;
config = &lt;src.config.Config object at 0x76276071bb00&gt;
obsidian_vault = PosixPath('/tmp/kindle_sync_test_6yzqeywc/obsidian_vault')

        @pytest.mark.e2e
        @pytest.mark.slow
        def test_complete_markdown_to_kindle_workflow(self, config, obsidian_vault):
            """Test complete workflow from markdown creation to Kindle delivery."""
            # Create sync folder
            sync_folder = obsidian_vault / "Kindle Sync"
            sync_folder.mkdir(exist_ok=True)
    
            # Create a test markdown document
            md_content = """# My Kindle Document
    
    This is a test document that will be processed through the complete workflow.
    
    ## Features Tested
    
    - Markdown to PDF conversion
    - Email delivery to Kindle
    - File backup
    - Processing statistics
    
    ### Code Example
    
    ```python
    def test_function():
        return "Hello, Kindle Scribe!"
    ```
    
    ## Conclusion
    
    This document tests the complete automation workflow.
    """
    
            md_file = sync_folder / "workflow_test.md"
            md_file.write_text(md_content)
    
            # Initialize sync processor
            processor = SyncProcessor(config)
    
            # Mock external dependencies
            with patch.object(
                processor.markdown_to_pdf, "_generate_pdf"
            ) as mock_generate_pdf:
                with patch.object(processor.kindle_sync, "_send_email") as mock_send_email:
                    with patch.object(processor.kindle_sync, "backup_file") as mock_backup:
                        # Mock successful operations
                        mock_backup.return_value = Path("/tmp/backup.md")
    
                        # Process the markdown file
                        processor._process_markdown_file(md_file)
    
                        # Verify all steps were executed
                        mock_backup.assert_called_once_with(md_file)
                        mock_generate_pdf.assert_called_once()
&gt;                       mock_send_email.assert_called_once()
E                       AssertionError: Expected '_send_email' to have been called once. Called 0 times.

tests/e2e/test_complete_workflow.py:69: AssertionError</failure></testcase><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_complete_pdf_to_obsidian_workflow" time="0.027" /><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_file_watcher_workflow" time="0.319" /><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_concurrent_file_processing_workflow" time="0.264"><failure message="assert 1 == 10">self = &lt;tests.e2e.test_complete_workflow.TestCompleteWorkflow object at 0x7627608adbe0&gt;
config = &lt;src.config.Config object at 0x76276068bd40&gt;
obsidian_vault = PosixPath('/tmp/kindle_sync_test_gmpiopae/obsidian_vault')

    @pytest.mark.e2e
    @pytest.mark.slow
    def test_concurrent_file_processing_workflow(self, config, obsidian_vault):
        """Test concurrent file processing workflow."""
        # Create sync folder
        sync_folder = obsidian_vault / "Kindle Sync"
        sync_folder.mkdir(exist_ok=True)
    
        # Create multiple test files
        test_files = []
        for i in range(10):
            md_file = sync_folder / f"concurrent_doc_{i}.md"
            md_file.write_text(
                f"# Concurrent Document {i}\n\nContent for document {i}."
            )
            test_files.append(md_file)
    
        # Initialize sync processor
        processor = SyncProcessor(config)
    
        # Track results
        results = []
        errors = []
    
        def process_file(file_path):
            try:
                with patch.object(processor.markdown_to_pdf, "_generate_pdf"):
                    with patch.object(processor.kindle_sync, "_send_email"):
                        with patch.object(processor.kindle_sync, "backup_file"):
                            processor._process_markdown_file(file_path)
                            results.append(file_path)
            except Exception as e:
                errors.append(e)
    
        # Process files concurrently
        threads = []
        for file_path in test_files:
            thread = threading.Thread(target=process_file, args=(file_path,))
            threads.append(thread)
            thread.start()
    
        # Wait for all threads to complete
        for thread in threads:
            thread.join()
    
        # Verify all files were processed successfully
        assert len(results) == 10
        assert len(errors) == 0
    
        # Verify statistics
        assert processor.stats["pdfs_generated"] == 10
&gt;       assert processor.stats["pdfs_sent_to_kindle"] == 10
E       assert 1 == 10

tests/e2e/test_complete_workflow.py:235: AssertionError</failure></testcase><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_error_recovery_workflow" time="0.023"><failure message="TypeError: TestCompleteWorkflow.test_error_recovery_workflow.&lt;locals&gt;.generate_side_effect() takes 1 positional argument but 2 were given">self = &lt;tests.e2e.test_complete_workflow.TestCompleteWorkflow object at 0x7627608ade50&gt;
config = &lt;src.config.Config object at 0x76276068a000&gt;
obsidian_vault = PosixPath('/tmp/kindle_sync_test_ujofjd87/obsidian_vault')

    @pytest.mark.e2e
    @pytest.mark.slow
    def test_error_recovery_workflow(self, config, obsidian_vault):
        """Test error recovery in complete workflow."""
        # Create sync folder
        sync_folder = obsidian_vault / "Kindle Sync"
        sync_folder.mkdir(exist_ok=True)
    
        # Create test files
        good_md_file = sync_folder / "good_document.md"
        good_md_file.write_text("# Good Document\n\nThis should process successfully.")
    
        bad_md_file = sync_folder / "bad_document.md"
        bad_md_file.write_text("# Bad Document\n\nThis will cause an error.")
    
        # Initialize sync processor
        processor = SyncProcessor(config)
    
        # Mock operations with mixed success/failure
        with patch.object(processor.markdown_to_pdf, "_generate_pdf") as mock_generate:
            with patch.object(processor.kindle_sync, "_send_email") as mock_send:
                with patch.object(processor.kindle_sync, "backup_file") as mock_backup:
                    # Configure mocks
                    def generate_side_effect(file_path):
                        if "bad" in str(file_path):
                            raise Exception("PDF generation failed")
                        return None
    
                    def send_side_effect(*args, **kwargs):
                        return True
    
                    mock_generate.side_effect = generate_side_effect
                    mock_send.side_effect = send_side_effect
                    mock_backup.return_value = Path("/tmp/backup.md")
    
                    # Process good file
&gt;                   processor._process_markdown_file(good_md_file)

tests/e2e/test_complete_workflow.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/sync_processor.py:94: in _process_markdown_file
    pdf_path = self.markdown_to_pdf.convert_markdown_to_pdf(markdown_path)
src/pdf_converter.py:122: in convert_markdown_to_pdf
    self._generate_pdf(processed_content, output_path)
/usr/lib/python3.12/unittest/mock.py:1134: in __call__
    return self._mock_call(*args, **kwargs)
/usr/lib/python3.12/unittest/mock.py:1138: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MagicMock name='_generate_pdf' id='129911492581552'&gt;
args = ('&lt;html&gt;&lt;head&gt;\n        &lt;style&gt;\n        body {\n            font-family: \'Times New Roman\', serif;\n            lin...essfully.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;', PosixPath('/tmp/kindle_sync_test_ujofjd87/obsidian_vault/Kindle Sync/good_document.pdf'))
kwargs = {}
effect = &lt;function TestCompleteWorkflow.test_error_recovery_workflow.&lt;locals&gt;.generate_side_effect at 0x7627605d5ee0&gt;

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
&gt;               result = effect(*args, **kwargs)
E               TypeError: TestCompleteWorkflow.test_error_recovery_workflow.&lt;locals&gt;.generate_side_effect() takes 1 positional argument but 2 were given

/usr/lib/python3.12/unittest/mock.py:1199: TypeError</failure></testcase><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_backup_and_cleanup_workflow" time="0.029"><failure message="assert 3 == 6">self = &lt;tests.e2e.test_complete_workflow.TestCompleteWorkflow object at 0x7627608ae0c0&gt;
config = &lt;src.config.Config object at 0x76276068a330&gt;
obsidian_vault = PosixPath('/tmp/kindle_sync_test_wzm4nc4a/obsidian_vault')

    @pytest.mark.e2e
    @pytest.mark.slow
    def test_backup_and_cleanup_workflow(self, config, obsidian_vault):
        """Test backup and cleanup workflow."""
        # Create sync folder
        sync_folder = obsidian_vault / "Kindle Sync"
        sync_folder.mkdir(exist_ok=True)
    
        # Create backup folder
        backup_folder = obsidian_vault.parent / "Backups"
        backup_folder.mkdir(exist_ok=True)
    
        # Create test files
        test_files = []
        for i in range(5):
            md_file = sync_folder / f"backup_test_{i}.md"
            md_file.write_text(f"# Backup Test {i}\n\nContent for backup test {i}.")
            test_files.append(md_file)
    
        # Initialize sync processor
        processor = SyncProcessor(config)
    
        # Mock backup operations
        with patch.object(processor.kindle_sync, "backup_file") as mock_backup:
            with patch.object(processor.markdown_to_pdf, "_generate_pdf"):
                with patch.object(processor.kindle_sync, "_send_email"):
                    # Process files
                    for file_path in test_files:
                        processor._process_markdown_file(file_path)
    
                    # Verify backups were created
                    assert mock_backup.call_count == 5
    
                    # Test cleanup
                    with patch.object(
                        processor.kindle_sync, "cleanup_old_files"
                    ) as mock_cleanup:
                        mock_cleanup.return_value = 3
    
                        cleaned_count = processor.cleanup_old_files(max_age_days=30)
    
&gt;                       assert cleaned_count == 6  # 3 from sync + 3 from backup
E                       assert 3 == 6

tests/e2e/test_complete_workflow.py:327: AssertionError</failure></testcase><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_kindle_sync_workflow" time="0.028"><failure message="AssertionError: Expected 'get_kindle_documents' to be called once. Called 0 times.">self = &lt;MagicMock name='get_kindle_documents' id='129911492809680'&gt;
args = (PosixPath('/tmp/kindle_sync_test_n2t4prj8/kindle_docs'),), kwargs = {}
msg = "Expected 'get_kindle_documents' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected 'get_kindle_documents' to be called once. Called 0 times.

/usr/lib/python3.12/unittest/mock.py:955: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.e2e.test_complete_workflow.TestCompleteWorkflow object at 0x7627608ae1b0&gt;
config = &lt;src.config.Config object at 0x76276068b1d0&gt;
obsidian_vault = PosixPath('/tmp/kindle_sync_test_n2t4prj8/obsidian_vault')

    @pytest.mark.e2e
    @pytest.mark.slow
    def test_kindle_sync_workflow(self, config, obsidian_vault):
        """Test Kindle sync workflow."""
        # Create sync folder
        sync_folder = obsidian_vault / "Kindle Sync"
        sync_folder.mkdir(exist_ok=True)
    
        # Create mock Kindle documents
        kindle_docs_folder = obsidian_vault.parent / "kindle_docs"
        kindle_docs_folder.mkdir(exist_ok=True)
    
        kindle_pdf1 = kindle_docs_folder / "kindle_doc1.pdf"
        kindle_pdf2 = kindle_docs_folder / "kindle_doc2.pdf"
        kindle_pdf1.write_bytes(b"Kindle PDF 1 content")
        kindle_pdf2.write_bytes(b"Kindle PDF 2 content")
    
        # Initialize sync processor
        processor = SyncProcessor(config)
    
        # Mock Kindle sync operations
        with patch.object(
            processor.kindle_sync, "get_kindle_documents"
        ) as mock_get_docs:
            with patch.object(processor.kindle_sync, "sync_from_kindle") as mock_sync:
                with patch.object(processor, "_process_pdf_file") as mock_process:
                    # Configure mocks
                    mock_get_docs.return_value = [kindle_pdf1, kindle_pdf2]
                    mock_sync.return_value = [
                        sync_folder / "kindle_doc1.pdf",
                        sync_folder / "kindle_doc2.pdf",
                    ]
    
                    # Sync from Kindle
                    synced_count = processor.sync_from_kindle(kindle_docs_folder)
    
                    # Verify sync operations
                    assert synced_count == 2
&gt;                   mock_get_docs.assert_called_once_with(kindle_docs_folder)
E                   AssertionError: Expected 'get_kindle_documents' to be called once. Called 0 times.

tests/e2e/test_complete_workflow.py:368: AssertionError</failure></testcase><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_statistics_tracking_workflow" time="0.025" /><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_configuration_validation_workflow" time="0.020" /><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_complete_system_lifecycle" time="0.026"><failure message="assert 0 == 1">self = &lt;tests.e2e.test_complete_workflow.TestCompleteWorkflow object at 0x7627608aeba0&gt;
config = &lt;src.config.Config object at 0x7627621c1a60&gt;
obsidian_vault = PosixPath('/tmp/kindle_sync_test_5ry3hukj/obsidian_vault')

    @pytest.mark.e2e
    @pytest.mark.slow
    def test_complete_system_lifecycle(self, config, obsidian_vault):
        """Test complete system lifecycle from start to stop."""
        # Create sync folder
        sync_folder = obsidian_vault / "Kindle Sync"
        sync_folder.mkdir(exist_ok=True)
    
        # Initialize sync processor
        processor = SyncProcessor(config)
    
        # Mock external dependencies
        with patch.object(processor.config, "validate", return_value=True):
            with patch.object(processor.file_watcher, "start") as mock_start:
                with patch.object(processor.file_watcher, "stop") as mock_stop:
                    with patch.object(
                        processor.file_watcher, "is_alive", return_value=True
                    ):
                        # Start the system
                        result = processor.start()
                        assert result is True
                        mock_start.assert_called_once()
    
                        # Create a test file during operation
                        md_file = sync_folder / "lifecycle_test.md"
                        md_file.write_text(
                            "# Lifecycle Test\n\nTesting system lifecycle."
                        )
    
                        # Simulate file processing
                        with patch.object(processor.markdown_to_pdf, "_generate_pdf"):
                            with patch.object(
                                processor.kindle_sync, "_send_email", return_value=True
                            ):
                                with patch.object(processor.kindle_sync, "backup_file"):
                                    processor._process_markdown_file(md_file)
    
                        # Stop the system
                        processor.stop()
                        mock_stop.assert_called_once()
    
                        # Verify final statistics
                        stats = processor.get_statistics()
                        assert stats["pdfs_generated"] == 1
&gt;                       assert stats["pdfs_sent_to_kindle"] == 1
E                       assert 0 == 1

tests/e2e/test_complete_workflow.py:487: AssertionError</failure></testcase></testsuite></testsuites>